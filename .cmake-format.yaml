_help_encode: 'Options affecting file encoding'
_help_format: 'Options affecting formatting.'
_help_lint: 'Options affecting the linter'
_help_markup: 'Options affecting comment reflow and formatting.'
_help_misc: 'Miscellaneous configurations options.'
_help_parse: 'Options affecting listfile parsing'
encode:
  _help_emit_byteorder_mark:
    - 'If true, emit the unicode byte-order mark (BOM) at the start'
    - 'of the file'
  _help_input_encoding:
    - 'Specify the encoding of the input file. Defaults to utf-8'
  _help_output_encoding:
    - 'Specify the encoding of the output file. Defaults to utf-8.'
    - 'Note that cmake only claims to support utf-8 so be careful'
    - 'when using anything else'
  emit_byteorder_mark: false
  input_encoding: utf-8
  output_encoding: utf-8
format:
  _help_always_wrap:
    - 'A list of command names which should always be wrapped'
  _help_autosort:
    - 'If true, the parsers may infer whether or not an argument'
    - 'list is sortable (without annotation).'
  _help_command_case:
    - 'Format command names consistently as ''lower'' or ''upper'' case'
  _help_dangle_align:
    - 'If the trailing parenthesis must be ''dangled'' on its on'
    - 'line, then align it to this reference: `prefix`: the start'
    - 'of the statement,  `prefix-indent`: the start of the'
    - 'statement, plus one indentation  level, `child`: align to'
    - 'the column of the arguments'
  _help_dangle_parens:
    - 'If a statement is wrapped to more than one line, than dangle'
    - 'the closing parenthesis on its own line.'
  _help_disable:
    - 'Disable formatting entirely, making cmake-format a no-op'
  _help_enable_sort:
    - 'If true, the argument lists which are known to be sortable'
    - 'will be sorted lexicographicall'
  _help_fractional_tab_policy:
    - 'If <use_tabchars> is True, then the value of this variable'
    - 'indicates how fractional indentions are handled during'
    - 'whitespace replacement. If set to ''use-space'', fractional'
    - 'indentation is left as spaces (utf-8 0x20). If set to'
    - '`round-up` fractional indentation is replaced with a single'
    - 'tab character (utf-8 0x09) effectively shifting the column'
    - 'to the next tabstop'
  _help_keyword_case:
    - 'Format keywords consistently as ''lower'' or ''upper'' case'
  _help_layout_passes:
    - 'A dictionary mapping layout nodes to a list of wrap'
    - 'decisions. See the documentation for more information.'
  _help_line_ending:
    - 'What style line endings to use in the output.'
  _help_line_width:
    - 'How wide to allow formatted cmake files'
  _help_max_lines_hwrap:
    - 'If a candidate layout is wrapped horizontally but it exceeds'
    - 'this many lines, then reject the layout.'
  _help_max_pargs_hwrap:
    - 'If a positional argument group contains more than this many'
    - 'arguments, then force it to a vertical layout.'
  _help_max_prefix_chars:
    - 'If the statement spelling length (including space and'
    - 'parenthesis) is larger than the tab width by more than this'
    - 'amount, then force reject un-nested layouts.'
  _help_max_rows_cmdline:
    - 'If a cmdline positional group consumes more than this many'
    - 'lines without nesting, then invalidate the layout (and nest)'
  _help_max_subgroups_hwrap:
    - 'If an argument group contains more than this many sub-groups'
    - '(parg or kwarg groups) then force it to a vertical layout.'
  _help_min_prefix_chars:
    - 'If the statement spelling length (including space and'
    - 'parenthesis) is smaller than this amount, then force reject'
    - 'nested layouts.'
  _help_require_valid_layout:
    - 'By default, if cmake-format cannot successfully fit'
    - 'everything into the desired linewidth it will apply the'
    - 'last, most agressive attempt that it made. If this flag is'
    - 'True, however, cmake-format will print error, exit with non-'
    - 'zero status code, and write-out nothing'
  _help_separate_ctrl_name_with_space:
    - 'If true, separate flow control names from their parentheses'
    - 'with a space'
  _help_separate_fn_name_with_space:
    - 'If true, separate function names from parentheses with a'
    - space
  _help_tab_size:
    - 'How many spaces to tab for indent'
  _help_use_tabchars:
    - 'If true, lines are indented using tab characters (utf-8'
    - '0x09) instead of <tab_size> space characters (utf-8 0x20).'
    - 'In cases where the layout would require a fractional tab'
    - 'character, the behavior of the  fractional indentation is'
    - 'governed by <fractional_tab_policy>'
  always_wrap: []
  autosort: false
  command_case: canonical
  dangle_align: prefix
  dangle_parens: false
  disable: false
  enable_sort: true
  fractional_tab_policy: use-space
  keyword_case: unchanged
  layout_passes: {}
  line_ending: unix
  line_width: 100
  max_lines_hwrap: 2
  max_pargs_hwrap: 6
  max_prefix_chars: 10
  max_rows_cmdline: 2
  max_subgroups_hwrap: 2
  min_prefix_chars: 4
  require_valid_layout: false
  separate_ctrl_name_with_space: false
  separate_fn_name_with_space: false
  tab_size: 2
  use_tabchars: false
lint:
  _help_argument_var_pattern:
    - 'regular expression pattern describing valid names for'
    - 'function/macro arguments and loop variables.'
  _help_disabled_codes:
    - 'a list of lint codes to disable'
  _help_function_pattern:
    - 'regular expression pattern describing valid function names'
  _help_global_var_pattern:
    - 'regular expression pattern describing valid names for'
    - 'variables with global (cache) scope'
  _help_internal_var_pattern:
    - 'regular expression pattern describing valid names for'
    - 'variables with global scope (but internal semantic)'
  _help_keyword_pattern:
    - 'regular expression pattern describing valid names for'
    - 'keywords used in functions or macros'
  _help_local_var_pattern:
    - 'regular expression pattern describing valid names for'
    - 'variables with local scope'
  _help_macro_pattern:
    - 'regular expression pattern describing valid macro names'
  _help_max_conditionals_custom_parser:
    - 'In the heuristic for C0201, how many conditionals to match'
    - 'within a loop in before considering the loop a parser.'
  _help_max_statement_spacing:
    - 'Require no more than this many newlines between statements'
  _help_min_statement_spacing:
    - 'Require at least this many newlines between statements'
  _help_private_var_pattern:
    - 'regular expression pattern describing valid names for'
    - 'privatedirectory variables'
  _help_public_var_pattern:
    - 'regular expression pattern describing valid names for public'
    - 'directory variables'
  argument_var_pattern: "[a-z][a-z0-9_]+"
  disabled_codes: []
  function_pattern: "[0-9a-z_]+"
  global_var_pattern: "[A-Z][0-9A-Z_]+"
  internal_var_pattern: _[A-Z][0-9A-Z_]+
  keyword_pattern: "[A-Z][0-9A-Z_]+"
  local_var_pattern: "[a-z][a-z0-9_]+"
  macro_pattern: "[0-9A-Z_]+"
  max_arguments: 5
  max_branches: 12
  max_conditionals_custom_parser: 2
  max_localvars: 15
  max_returns: 6
  max_statement_spacing: 2
  max_statements: 50
  min_statement_spacing: 1
  private_var_pattern: _[0-9a-z_]+
  public_var_pattern: "[A-Z][0-9A-Z_]+"
markup:
  _help_bullet_char:
    - 'What character to use for bulleted lists'
  _help_canonicalize_hashrulers:
    - 'If true, then insert a space between the first hash char and'
    - 'remaining hash chars in a hash ruler, and normalize its'
    - 'length to fill the column'
  _help_enable_markup:
    - 'enable comment markup parsing and reflow'
  _help_enum_char:
    - 'What character to use as punctuation after numerals in an'
    - 'enumerated list'
  _help_explicit_trailing_pattern:
    - 'If a comment line matches starts with this pattern then it'
    - 'is explicitly a trailing comment for the preceeding'
    - "argument. Default is '#<'"
  _help_fence_pattern:
    - 'Regular expression to match preformat fences in comments'
    - 'default= ``r''^\s*([`~]{3}[`~]*)(.*)$''``'
  _help_first_comment_is_literal:
    - 'If comment markup is enabled, don''t reflow the first comment'
    - 'block in each listfile. Use this to preserve formatting of'
    - 'your copyright/license statements.'
  _help_hashruler_min_length:
    - 'If a comment line starts with at least this many consecutive'
    - 'hash characters, then don''t lstrip() them off. This allows'
    - 'for lazy hash rulers where the first hash char is not'
    - 'separated by space'
  _help_literal_comment_pattern:
    - 'If comment markup is enabled, don''t reflow any comment block'
    - 'which matches this (regex) pattern. Default is `None`'
    - (disabled).
  _help_ruler_pattern:
    - 'Regular expression to match rulers in comments default='
  bullet_char: "*"
  canonicalize_hashrulers: true
  enable_markup: true
  enum_char: .
  explicit_trailing_pattern: "#<"
  fence_pattern: ^\s*([`~]{3}[`~]*)(.*)$
  first_comment_is_literal: false
  hashruler_min_length: 10
  literal_comment_pattern:
  ruler_pattern: ^\s*[^\w\s]{3}.*[^\w\s]{3}$
misc:
  _help_per_command:
    - 'A dictionary containing any per-command configuration'
    - 'overrides. Currently only `command_case` is supported.'
  per_command: {}
parse:
  _help_additional_commands:
    - 'Specify structure for custom cmake functions'
  _help_override_spec:
    - 'Override configurations per-command where available'
  _help_proptags:
    - 'Specify property tags.'
  _help_vartags:
    - 'Specify variable tags.'
  additional_commands:
    foo:
      flags:
        - BAR
        - BAZ
      kwargs:
        DEPENDS: "*"
        HEADERS: "*"
        SOURCES: "*"
  override_spec: {}
  proptags: []
  vartags: []
